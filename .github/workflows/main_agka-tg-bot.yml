# Этот workflow сначала собирает приложение, а потом отправляет готовый пакет в Azure
name: Build and Deploy Python app to Azure Web App

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Скачиваем ваш код из репозитория
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Устанавливаем нужную версию Python
      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # Вы можете выбрать 3.10, 3.11 или 3.12

      # 3. Создаем виртуальное окружение и устанавливаем зависимости
      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
      
      - name: Install dependencies
        run: pip install -r requirements.txt
        
      # 4. Архивируем код вместе с установленными библиотеками
      - name: Zip artifact for deployment
        run: |
          # Создаем папку для пакета
          mkdir -p release
          # Копируем код бота и файл требований
          cp bot.py requirements.txt ./release/
          # Копируем установленные библиотеки
          cp -r venv/lib/python3.11/site-packages/* ./release/
          # Архивируем все вместе
          cd release
          zip -r ../release.zip .

      # 5. Сохраняем созданный zip-архив для следующего шага
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build # Этот шаг запустится только после успешной сборки
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write # Необходимо для входа в Azure

    steps:
      # 1. Скачиваем готовый zip-архив из предыдущего шага
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app

      # 2. Входим в Azure
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_887A53245E9B4CC5A9DA0D70CD8FE744 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_3E2AB6118369497F8F3580D1100DC99B }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_7683B639F799416E85632E1D3075235C }}

      # 3. Отправляем ГОТОВЫЙ ПАКЕТ (release.zip) в Azure
      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'agka-tg-bot'
          slot-name: 'Production'
          package: release.zip # Указываем, что нужно развернуть наш архив
