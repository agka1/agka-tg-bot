import telebot
import google.generativeai as genai
import os
import threading
from flask import Flask
import logging

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# --- –ó–ê–ì–†–£–ó–ö–ê –ö–õ–Æ–ß–ï–ô ---
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')

# --- –ß–ê–°–¢–¨ –° –ú–ò–ù–ò-–í–ï–ë-–°–ï–†–í–ï–†–û–ú (–î–õ–Ø AZURE) ---
app = Flask(__name__)
@app.route('/')
def hello_world():
    return 'Bot is alive!'

def run_web_server():
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º 8080 –ø–æ—Ä—Ç, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–ª—è Web Apps, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        app.run(host='0.0.0.0', port=8000)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–µ: {e}", exc_info=True)

# --- –û–°–ù–û–í–ù–ê–Ø –ß–ê–°–¢–¨ –ë–û–¢–ê ---
# --- –ó–ê–ü–£–°–ö –í–°–ï–ì–û –í–ú–ï–°–¢–ï ---
if __name__ == "__main__":
    try:
        logging.info("–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

        if not TELEGRAM_BOT_TOKEN or not GEMINI_API_KEY:
            raise ValueError("–û–®–ò–ë–ö–ê: –û–¥–∏–Ω –∏–ª–∏ –æ–±–∞ API-–∫–ª—é—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        
        logging.info("API –∫–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

        bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel('gemini-1.5-flash')
        
        logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –º–æ–¥–µ–ª–∏ Gemini –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")

        @bot.message_handler(commands=['start'])
        def send_welcome(message):
            bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ Google Gemini. –ó–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å.")

        @bot.message_handler(func=lambda message: True)
        def get_gemini_response(message):
            thinking_message = bot.reply_to(message, "üß† –î—É–º–∞—é...")
            try:
                response = model.generate_content(message.text)
                bot.edit_message_text(chat_id=message.chat.id, message_id=thinking_message.message_id, text=response.text)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ Gemini: {e}", exc_info=True)
                bot.edit_message_text(chat_id=message.chat.id, message_id=thinking_message.message_id, text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Gemini.")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
        web_thread = threading.Thread(target=run_web_server)
        web_thread.daemon = True
        web_thread.start()
        logging.info("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Azure –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ.")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        logging.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (polling)...")
        bot.polling(none_stop=True)

    except Exception as e:
        # –≠–¢–û–¢ –ë–õ–û–ö –ü–û–ô–ú–ê–ï–¢ –õ–Æ–ë–£–Æ –û–®–ò–ë–ö–£ –ü–†–ò –ó–ê–ü–£–°–ö–ï –ò –í–´–í–ï–î–ï–¢ –ï–ï
        logging.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï –ë–û–¢–ê: {e}", exc_info=True)
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –ª–æ–≥ —É—Å–ø–µ–ª –∑–∞–ø–∏—Å–∞—Ç—å—Å—è
        import time
        time.sleep(60)
