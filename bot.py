import telebot
import google.generativeai as genai
import os
import threading
from flask import Flask
import logging
import sys
import time

# --- –Ø–í–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø AZURE ---
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
handler = logging.StreamHandler(sys.stdout)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')
MAX_HISTORY_LENGTH = 30  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å + –±–æ—Ç)

# --- –•–†–ê–ù–ò–õ–ò–©–ï –ò–°–¢–û–†–ò–ò –î–ò–ê–õ–û–ì–û–í ---
# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á - —ç—Ç–æ ID —á–∞—Ç–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
user_histories = {}

# --- –í–ï–ë-–°–ï–†–í–ï–† –î–õ–Ø AZURE ---
app = Flask(__name__)
@app.route('/')
def hello_world():
    return 'Bot is alive!'

def run_web_server():
    try:
        app.run(host='0.0.0.0', port=8000)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–µ: {e}", exc_info=True)

# --- –û–°–ù–û–í–ù–ê–Ø –ß–ê–°–¢–¨ –ë–û–¢–ê ---
if __name__ == "__main__":
    try:
        logger.info("–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

        if not TELEGRAM_BOT_TOKEN or not GEMINI_API_KEY:
            raise ValueError("–û–®–ò–ë–ö–ê: –û–¥–∏–Ω –∏–ª–∏ –æ–±–∞ API-–∫–ª—é—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        
        logger.info("API –∫–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

        bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel('gemini-1.5-flash')
        
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –º–æ–¥–µ–ª–∏ Gemini –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")

        # --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---

        @bot.message_handler(commands=['start'])
        def send_welcome(message):
            bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ Google Gemini. –Ø –∑–∞–ø–æ–º–∏–Ω–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /reset.")

        @bot.message_handler(commands=['reset'])
        def reset_history(message):
            user_id = message.chat.id
            if user_id in user_histories:
                user_histories.pop(user_id)
                bot.reply_to(message, "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!")
            else:
                bot.reply_to(message, "–£ –Ω–∞—Å –µ—â–µ –Ω–µ –±—ã–ª–æ –¥–∏–∞–ª–æ–≥–∞. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å.")

        @bot.message_handler(func=lambda message: True)
        def get_gemini_response(message):
            user_id = message.chat.id
            thinking_message = bot.reply_to(message, "üß† –î—É–º–∞—é —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")

            try:
                # 1. –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                history = user_histories.get(user_id, [])

                # 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
                # –§–æ—Ä–º–∞—Ç Gemini: {'role': 'user'/'model', 'parts': [—Ç–µ–∫—Å—Ç]}
                history.append({'role': 'user', 'parts': [message.text]})

                # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –≤ Gemini
                response = model.generate_content(history)
                
                # 4. –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
                # –í–∞–∂–Ω–æ: –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —É –æ—Ç–≤–µ—Ç–∞ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
                if response.parts:
                    bot_response_text = response.parts[0].text
                    history.append({'role': 'model', 'parts': [bot_response_text]})
                else:
                    # –ï—Å–ª–∏ Gemini –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑-–∑–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
                    bot_response_text = "–Ø –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å."
                    # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ä—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
                
                # 5. –û–±—Ä–µ–∑–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ —Å—Ç–∞–ª–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–π
                while len(history) > MAX_HISTORY_LENGTH:
                    history.pop(0) # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

                # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
                user_histories[user_id] = history

                # 7. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                bot.edit_message_text(chat_id=user_id, message_id=thinking_message.message_id, text=bot_response_text)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ Gemini: {e}", exc_info=True)
                bot.edit_message_text(chat_id=user_id, message_id=thinking_message.message_id, text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Gemini.")

        # --- –ó–ê–ü–£–°–ö ---
        web_thread = threading.Thread(target=run_web_server)
        web_thread.daemon = True
        web_thread.start()
        logger.info("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Azure –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ.")

        logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (polling)...")
        bot.polling(none_stop=True)

    except Exception as e:
        logger.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï –ë–û–¢–ê: {e}", exc_info=True)
        time.sleep(60)