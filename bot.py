import telebot
import google.generativeai as genai
import os
import threading
from flask import Flask
import logging
import sys
import time
from telebot import types
from telebot.types import BotCommand # <-- 1. –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥
import re
from google.api_core import exceptions as google_exceptions

# --- –Ø–í–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø AZURE ---
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
handler = logging.StreamHandler(sys.stdout)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')
MAX_HISTORY_LENGTH = 30

# --- –ö–û–ù–°–¢–ê–ù–¢–´ –ú–û–î–ï–õ–ï–ô ---
MODEL_FLASH = 'gemini-1.5-flash'
MODEL_PRO = 'gemini-2.5-pro'
DEFAULT_MODEL_NAME = 'flash'

# --- –•–†–ê–ù–ò–õ–ò–©–ê –î–ê–ù–ù–´–• –í –ü–ê–ú–Ø–¢–ò ---
user_histories = {}
user_model_choices = {}

# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò MARKDOWN ---
def to_telegram_markdown(text):
    text = text.replace('**', '*')
    special_chars = r"([.>#+-=|{!}])"
    return re.sub(special_chars, r'\\\1', text)

# --- –í–ï–ë-–°–ï–†–í–ï–† –î–õ–Ø AZURE ---
app = Flask(__name__)
@app.route('/')
def hello_world():
    return 'Bot is alive!'

def run_web_server():
    try:
        app.run(host='0.0.0.0', port=8000)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–µ: {e}", exc_info=True)

# --- –û–°–ù–û–í–ù–ê–Ø –ß–ê–°–¢–¨ –ë–û–¢–ê ---
if __name__ == "__main__":
    try:
        logger.info("–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

        if not TELEGRAM_BOT_TOKEN or not GEMINI_API_KEY:
            raise ValueError("–û–®–ò–ë–ö–ê: –û–¥–∏–Ω –∏–ª–∏ –æ–±–∞ API-–∫–ª—é—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        
        logger.info("API –∫–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

        bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
        genai.configure(api_key=GEMINI_API_KEY)
        
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")

        # --- 2. –£–°–¢–ê–ù–û–í–ö–ê –ö–û–ú–ê–ù–î-–ü–û–î–°–ö–ê–ó–û–ö –î–õ–Ø TELEGRAM ---
        try:
            logger.info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞...")
            bot.set_my_commands([
                BotCommand('start', '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'),
                BotCommand('reset', '–°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞'),
                BotCommand('model', '–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å Gemini (Flash/Pro)')
            ])
            logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: {e}")

        # --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---
        @bot.message_handler(commands=['start', 'reset', 'model'])
        def handle_commands(message):
            # ... (—ç—Ç–æ—Ç –±–ª–æ–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
            if message.text == '/start':
                bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ Google Gemini.\n\n"
                                      "–Ø –∑–∞–ø–æ–º–∏–Ω–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞.\n"
                                      "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π /reset.\n"
                                      "–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å (–±—ã—Å—Ç—Ä—É—é –∏–ª–∏ –º–æ—â–Ω—É—é), –∏—Å–ø–æ–ª—å–∑—É–π /model.")
            elif message.text == '/reset':
                user_id = message.chat.id
                if user_id in user_histories:
                    user_histories.pop(user_id)
                bot.reply_to(message, "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!")
            elif message.text == '/model':
                markup = types.InlineKeyboardMarkup(row_width=2)
                btn_flash = types.InlineKeyboardButton("‚ö°Ô∏è Flash (–ë—ã—Å—Ç—Ä—ã–π)", callback_data='select_flash')
                btn_pro = types.InlineKeyboardButton("üíé Pro (–ú–æ—â–Ω—ã–π)", callback_data='select_pro')
                markup.add(btn_flash, btn_pro)
                user_id = message.chat.id
                current_model_name = user_model_choices.get(user_id, DEFAULT_MODEL_NAME)
                text_to_send = f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: *{current_model_name.capitalize()}*.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –¥–ª—è –¥–∏–∞–ª–æ–≥–∞:"
                bot.send_message(user_id, to_telegram_markdown(text_to_send), 
                                 reply_markup=markup, parse_mode='MarkdownV2')

        @bot.callback_query_handler(func=lambda call: call.data.startswith('select_'))
        def handle_model_selection(call):
            # ... (—ç—Ç–æ—Ç –±–ª–æ–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
            user_id = call.message.chat.id
            model_text = ""
            if call.data == 'select_flash':
                user_model_choices[user_id] = 'flash'
                model_text = "‚ö°Ô∏è Flash"
            elif call.data == 'select_pro':
                user_model_choices[user_id] = 'pro'
                model_text = "üíé Pro"
            bot.answer_callback_query(call.id, text=f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å {model_text}")
            text_to_send = f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: *{model_text}*"
            bot.edit_message_text(chat_id=user_id, message_id=call.message.message_id, 
                                  text=to_telegram_markdown(text_to_send), parse_mode='MarkdownV2')

        @bot.message_handler(func=lambda message: True)
        def get_gemini_response(message):
            # ... (—ç—Ç–æ—Ç –±–ª–æ–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
            user_id = message.chat.id
            thinking_message = bot.reply_to(message, "‚è≥ –î—É–º–∞—é —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")
            try:
                chosen_model_name = user_model_choices.get(user_id, DEFAULT_MODEL_NAME)
                model = genai.GenerativeModel(MODEL_PRO if chosen_model_name == 'pro' else MODEL_FLASH)
                history = user_histories.get(user_id, [])
                history.append({'role': 'user', 'parts': [message.text]})
                response = model.generate_content(history)
                if response.parts:
                    bot_response_text = response.parts[0].text
                    history.append({'role': 'model', 'parts': [bot_response_text]})
                else:
                    bot_response_text = "–Ø –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å."
                while len(history) > MAX_HISTORY_LENGTH:
                    history.pop(0)
                user_histories[user_id] = history
                formatted_text = to_telegram_markdown(bot_response_text)
                bot.edit_message_text(chat_id=user_id, message_id=thinking_message.message_id, 
                                      text=formatted_text, parse_mode='MarkdownV2')
            except google_exceptions.ResourceExhausted as e:
                logger.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Gemini API: {e}")
                response_text = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤! üå™Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                bot.edit_message_text(chat_id=user_id, message_id=thinking_message.message_id, text=response_text)
            except Exception as e:
                logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ Gemini: {e}", exc_info=True)
                response_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Gemini. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                bot.edit_message_text(chat_id=user_id, message_id=thinking_message.message_id, text=response_text)

        # --- –ó–ê–ü–£–°–ö ---
        web_thread = threading.Thread(target=run_web_server)
        web_thread.daemon = True
        web_thread.start()
        logger.info("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Azure –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ.")

        logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (polling)...")
        bot.polling(none_stop=True)

    except Exception as e:
        logger.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï –ë–û–¢–ê: {e}", exc_info=True)
        time.sleep(60)